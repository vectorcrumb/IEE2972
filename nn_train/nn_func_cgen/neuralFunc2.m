function [y1] = neuralFunc2(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 12-Oct-2017 09:05:26.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx3 matrix, input #1
% and returns:
%   y = Qx3 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.661570789487485;-0.7563952384436;10.4473600339938];
x1_step1.gain = [1.5127055301441;1.3214144766342;0.0305998651016098];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.2415210568864099;-3.863460922595046;2.8342058096072087;-0.56891538185318402;2.6510435758231043;0.57961458511582575;-2.3205773958598011;-0.96139874498190769;0.54111553718234517;-0.70943443902897485;0.15660607151356012;0.61083609728356758;0.66990813423384199;-1.7662138463452217;0.88124499281755453;0.55088051203560295;-2.3187824631910141;3.2625510466842007;-2.8472167858040294;-4.8652671803786225];
IW1_1 = [-0.00075068637005515956 1.2087114936477128 -0.93560501712152955;0.8851205143553379 1.1162964570146272 -2.6703304478904277;-2.4392348908205554 -1.5401505199491232 -2.2138199146870674;0.00032646606075793354 -0.48041738326575661 0.37211658283713833;-1.7267703814019175 -2.3871580534918677 2.6677607199035176;-0.32046904878729077 0.21843519413907514 0.32384677935088929;3.5447024031044223 -0.79264454876844337 2.7753626452387792;2.7782786395745913 -0.58001436795175387 -1.7903134544019139;-3.2800411748118785 0.043082463795585869 -2.0946068216003888;0.49234039862595791 0.31116095456312881 0.44751342355109391;0.31620876924776448 3.9200189522915623 -0.24969240995850769;0.54947773461221672 -0.37449802099862151 -0.55525926176110907;0.00025248746125611005 -0.37295894449753292 0.28885243490463902;-3.3979987104032765 0.18367859266748193 1.0141896659042979;2.1462720459415476 -0.49255627290445014 -1.9596194625489416;0.29851877701400953 0.18865211786493255 0.27131697972579766;-1.6518077142432444 1.1263749619763324 1.6695791034698964;3.4370452410899035 0.33691055957758009 -2.154286085205988;-0.18992920518972836 3.6681819046967057 0.70316764930594677;-2.7996041873588253 3.4329212699218914 1.021466912142057];

% Layer 2
b2 = [0.38811041809557462;-0.88588622217965129;-0.88815907290950058];
LW2_1 = [-1.2137239698882962 -0.00015994317205375732 0.00016863551416335541 1.6550349622369966 -8.2791356815507131e-06 -0.032296118160010913 6.0865544789500715e-07 2.7824958712992186e-06 8.4356875795973515e-07 -0.013267713596813441 -8.9921571128164188e-07 0.010165975889758854 2.8968536539760446 5.3903097591221813e-07 7.6815320904730783e-06 -0.037115224135244686 -0.00082153610965671718 1.9327216821607387e-06 5.7448169176209852e-06 1.454897243972251e-05;-0.0034512148355458987 -2.5911017312525037e-05 0.00017366906406093586 0.004751273560632735 9.6508164015227045e-07 2.7626311217674298 -6.9629373403421297e-07 -9.508051543885045e-06 6.3322304892876326e-07 -0.01375941967630279 -5.1830453506794656e-07 -0.87386097878262181 0.0082717470197987714 7.1331835469725666e-06 7.572494180189203e-06 -0.038496112707277021 0.068960092247191809 -8.6116113854786013e-07 -3.1277221968859911e-06 -1.7279368022158311e-06;-0.015586287117588995 -7.6476562912459221e-06 -0.013847931614383779 0.0212460981063528 -1.9031962428041384e-07 0.097427840212703662 9.5494152232550186e-07 -3.5415649766587203e-06 -1.5455854166311093e-06 1.1055539798288225 -5.0092067996261355e-07 -0.030809335698696632 0.037180428433320145 2.5854195103713368e-06 -1.5822876865697371e-06 3.0927276386717901 0.0024408066419555822 2.8839600204697637e-06 -7.4605803847395271e-07 -1.1578628582985946e-05];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.030211612933084;0.0302115810897569;0.0302116521299705];
y1_step1.xoffset = [10.0001472830055;10.0001196057149;10.0001863417812];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
